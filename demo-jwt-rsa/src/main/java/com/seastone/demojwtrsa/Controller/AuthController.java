package com.seastone.demojwtrsa.Controller;

import com.seastone.demojwtrsa.DTO.AuthRequest;
import com.seastone.demojwtrsa.DTO.AuthResponse;
import com.seastone.demojwtrsa.DTO.RefreshTokenRequest;
import com.seastone.demojwtrsa.Service.RefreshTokenService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;
import org.springframework.security.oauth2.jwt.JwsHeader;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.time.temporal.ChronoUnit;

/**
 * ‚úÖ Controller x·ª≠ l√Ω x√°c th·ª±c v√† qu·∫£n l√Ω JWT
 * - Cung c·∫•p API ƒëƒÉng nh·∫≠p (`/auth/login`)
 * - Cung c·∫•p API l√†m m·ªõi Access Token (`/auth/refresh`)
 * - Cung c·∫•p API ƒëƒÉng xu·∫•t (`/auth/logout`)
 */
@RestController
@RequestMapping("/auth")
public class AuthController {

    private final JwtEncoder jwtEncoder;
    private final RefreshTokenService refreshTokenService;

    /**
     * Constructor ƒë·ªÉ inject dependencies
     *
     * @param jwtEncoder           D√πng ƒë·ªÉ t·∫°o Access Token
     * @param refreshTokenService  D√πng ƒë·ªÉ qu·∫£n l√Ω Refresh Token (l∆∞u trong Redis)
     */
    public AuthController(JwtEncoder jwtEncoder, RefreshTokenService refreshTokenService) {
        this.jwtEncoder = jwtEncoder;
        this.refreshTokenService = refreshTokenService;
    }

    /**
     * ‚úÖ API ƒëƒÉng nh·∫≠p (`/auth/login`)
     * - Ki·ªÉm tra username & password (t·∫°m th·ªùi hardcode)
     * - N·∫øu ƒë√∫ng, t·∫°o Access Token (5 ph√∫t) v√† Refresh Token (7 ng√†y)
     * - Tr·∫£ v·ªÅ Access Token + Refresh Token cho client
     *
     * @param request D·ªØ li·ªáu ƒëƒÉng nh·∫≠p (username, password)
     * @return ResponseEntity ch·ª©a Access Token & Refresh Token n·∫øu h·ª£p l·ªá, ho·∫∑c 401 n·∫øu sai
     */
    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@RequestBody AuthRequest request) {
        // Ki·ªÉm tra username & password (hardcode)
        if (!"admin".equals(request.getUsername()) || !"password".equals(request.getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }

        // üîë T·∫°o Access Token
        String accessToken = generateAccessToken(request.getUsername());

        // üîÑ T·∫°o Refresh Token (l∆∞u v√†o Redis)
        String refreshToken = refreshTokenService.createRefreshToken(request.getUsername());

        // ‚úÖ Tr·∫£ v·ªÅ Access Token & Refresh Token
        return ResponseEntity.ok(new AuthResponse(accessToken, refreshToken));
    }

    /**
     * ‚úÖ API l√†m m·ªõi Access Token (`/auth/refresh`)
     * - Ki·ªÉm tra Refresh Token c√≥ h·ª£p l·ªá kh√¥ng
     * - N·∫øu h·ª£p l·ªá, c·∫•p Access Token m·ªõi
     * - N·∫øu kh√¥ng, tr·∫£ v·ªÅ l·ªói 401
     *
     * @param refreshTokenRequest D·ªØ li·ªáu ch·ª©a Refresh Token
     * @return ResponseEntity ch·ª©a Access Token m·ªõi ho·∫∑c 401 n·∫øu Refresh Token kh√¥ng h·ª£p l·ªá
     */
    @PostMapping("/refresh")
    public ResponseEntity<AuthResponse> refreshToken(@RequestBody RefreshTokenRequest refreshTokenRequest) {
        // üîÑ Ki·ªÉm tra xem Refresh Token c√≥ h·ª£p l·ªá kh√¥ng
        String username = refreshTokenService.validateRefreshToken(refreshTokenRequest.getRefreshToken());

        // ‚ùå N·∫øu Refresh Token kh√¥ng h·ª£p l·ªá ‚Üí Tr·∫£ v·ªÅ l·ªói 401
        if (username == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }

        // üîë T·∫°o Access Token m·ªõi
        String newAccessToken = generateAccessToken(username);

        // ‚úÖ Tr·∫£ v·ªÅ Access Token m·ªõi & gi·ªØ nguy√™n Refresh Token c≈©
        return ResponseEntity.ok(new AuthResponse(newAccessToken, refreshTokenRequest.getRefreshToken()));
    }

    /**
     * ‚úÖ API ƒëƒÉng xu·∫•t (`/auth/logout`)
     * - X√≥a Refresh Token kh·ªèi Redis ƒë·ªÉ v√¥ hi·ªáu h√≥a n√≥
     *
     * @param refreshTokenRequest D·ªØ li·ªáu ch·ª©a Refresh Token c·∫ßn x√≥a
     * @return Th√¥ng b√°o ƒëƒÉng xu·∫•t th√†nh c√¥ng
     */
    @PostMapping("/logout")
    public ResponseEntity<String> logout(@RequestBody RefreshTokenRequest refreshTokenRequest) {
        // üîÑ X√≥a Refresh Token kh·ªèi Redis
        refreshTokenService.deleteRefreshToken(refreshTokenRequest.getRefreshToken());

        // ‚úÖ Tr·∫£ v·ªÅ th√¥ng b√°o ƒëƒÉng xu·∫•t th√†nh c√¥ng
        return ResponseEntity.ok("Logged out successfully");
    }

    /**
     * üîë T·∫°o Access Token b·∫±ng RSA Private Key
     * - Th·ªùi gian s·ªëng: 5 ph√∫t
     * - Ch·ª©a th√¥ng tin user & role
     *
     * @param username T√™n user ƒë·ªÉ g√°n v√†o JWT
     * @return Chu·ªói Access Token ƒë√£ k√Ω
     */
    private String generateAccessToken(String username) {
        Instant now = Instant.now();
        return jwtEncoder.encode(JwtEncoderParameters.from(
                JwsHeader.with(SignatureAlgorithm.RS256).build(),
                JwtClaimsSet.builder()
                        .subject(username) // Ai ƒëang ƒëƒÉng nh·∫≠p?
                        .issuedAt(now) // Th·ªùi ƒëi·ªÉm t·∫°o token
                        .expiresAt(now.plus(1, ChronoUnit.MINUTES)) // H·∫øt h·∫°n sau 5 ph√∫t
                        .claim("role", "ADMIN") // G√°n quy·ªÅn cho user
                        .build()
        )).getTokenValue();
    }
}

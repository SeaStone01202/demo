package com.seastone.demojwtrsa.Service;

import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.UUID;
import java.util.concurrent.TimeUnit;

/**
 * ‚úÖ Service qu·∫£n l√Ω Refresh Token trong Redis
 * - L∆∞u Refresh Token v√†o Redis v·ªõi th·ªùi gian s·ªëng c·ªë ƒë·ªãnh
 * - X√°c th·ª±c Refresh Token c√≥ h·ª£p l·ªá hay kh√¥ng
 * - X√≥a Refresh Token kh·ªèi Redis khi user logout
 */
@Service
public class RefreshTokenService {

    private final RedisTemplate<String, String> redisTemplate;
    private static final long REFRESH_TOKEN_TTL = 7 * 24 * 60 * 60; // ‚è≥ TTL: 7 ng√†y

    /**
     * Inject RedisTemplate ƒë·ªÉ thao t√°c v·ªõi Redis
     *
     * @param redisTemplate D√πng ƒë·ªÉ l∆∞u v√† truy xu·∫•t Refresh Token
     */
    public RefreshTokenService(RedisTemplate<String, String> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    /**
     * ‚úÖ T·∫°o Refresh Token m·ªõi cho user
     * - Sinh m·ªôt UUID ng·∫´u nhi√™n l√†m Refresh Token
     * - L∆∞u v√†o Redis v·ªõi th·ªùi gian s·ªëng l√† 7 ng√†y
     *
     * @param username T√™n user ƒë·ªÉ li√™n k·∫øt v·ªõi Refresh Token
     * @return Chu·ªói Refresh Token ƒë√£ t·∫°o
     */
    public String createRefreshToken(String username) {
        String refreshToken = UUID.randomUUID().toString(); // üîë Sinh UUID ng·∫´u nhi√™n l√†m token
        redisTemplate.opsForValue().set(
                "refreshToken:" + refreshToken, // Key: refreshToken:<token>
                username, // Value: username
                REFRESH_TOKEN_TTL, TimeUnit.SECONDS // TTL: 7 ng√†y
        );
        return refreshToken;
    }

    /**
     * ‚úÖ Ki·ªÉm tra Refresh Token c√≥ h·ª£p l·ªá kh√¥ng
     * - N·∫øu token t·ªìn t·∫°i trong Redis ‚Üí Tr·∫£ v·ªÅ username
     * - N·∫øu token kh√¥ng t·ªìn t·∫°i ‚Üí Tr·∫£ v·ªÅ null (h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá)
     *
     * @param refreshToken Refresh Token c·∫ßn ki·ªÉm tra
     * @return Username n·∫øu token h·ª£p l·ªá, null n·∫øu kh√¥ng h·ª£p l·ªá
     */
    public String validateRefreshToken(String refreshToken) {
        return redisTemplate.opsForValue().get("refreshToken:" + refreshToken);
    }

    /**
     * ‚úÖ X√≥a Refresh Token kh·ªèi Redis (Khi user logout)
     *
     * @param refreshToken Refresh Token c·∫ßn x√≥a
     */
    public void deleteRefreshToken(String refreshToken) {
        redisTemplate.delete("refreshToken:" + refreshToken);
    }
}
